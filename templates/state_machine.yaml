AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Jane Doe State Machine

Globals:
  Function:
    Runtime: python3.7
    Timeout: 180
    AutoPublishAlias: live
    Tracing: Active
    Layers: !Ref CommonLayers
    Environment:
      Variables:
        LogLevel: !Ref LogLevel

Parameters:
  CommonLayers:
    Type: CommaDelimitedList
    Description: Common layers supplied to all functions
  DeletionQueueTableName:
    Description: Table name for Deletion Queue Table
    Type: String
  DeletionTaskCPU:
    Type: String
  DeletionTaskMemory:
    Type: String
  QueueUrl:
    Type: String
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
    - CRITICAL
    - FATAL
    - ERROR
    - WARNING
    - INFO
    - DEBUG
    - NOTSET
  StateMachinePrefix:
    Type: String

Resources:
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource: "*"
          - Effect: Allow
            Action:
            - "ecs:RunTask"
            - "ecs:StopTask"
            - "ecs:DescribeTasks"
            Resource: "*"
          - Effect: Allow
            Action:
            - "events:PutTargets"
            - "events:PutRule"
            - "events:DescribeRule"
            Resource: "*"

  StateMachineStub:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${StateMachinePrefix}-StateMachineStub
      DefinitionString: |-
        {
          "StartAt": "Pass",
          "States": {
            "Pass": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StatesExecutionRole.Arn

  # Not exposed yet
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${StateMachinePrefix}-StateMachine
      DefinitionString: !Sub |-
        {
          "Comment": "State machine for processing the Jane Doe deletion queue.",
          "StartAt": "Check is Oldest Execution",
          "States": {
            "Check is Oldest Execution": {
              "Comment": "Queries the Step Functions API to check if the current executions is the oldest",
              "Type": "Task",
              "Resource": "${OldestExecutionCheck.Arn}",
              "Parameters": {
                "ExecutionId.$": "$$.Execution.Id"
              },
              "ResultPath": "$.IsOldestExecution",
              "Next": "Should Start?"
            },
            "Wait": {
              "Comment": "Waits before checking again whether this is the current execution",
              "Type": "Wait",
              "Seconds": 120,
              "Next": "Check is Oldest Execution"
            },
            "Should Start?": {
              "Comment": "Check if this execution is the oldest running execution and proceed if so.",
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.IsOldestExecution",
                  "BooleanEquals": true,
                  "Next": "Query Deletion Queue"
                },
                {
                  "Variable": "$.IsOldestExecution",
                  "BooleanEquals": false,
                  "Next": "Wait"
                }
              ],
              "Default": "CatchAllFallback"
            },
            "Query Deletion Queue": {
              "Comment": "Scan the deletion queue table to obtain all users to be deleted ",
              "Type": "Task",
              "Resource": "${QueryDeletionQueue.Arn}",
              "ResultPath": "$.DeletionQueue",
              "Next": "Users in Queue?"
            },
            "Users in Queue?": {
              "Comment": "If the deletion queue is empty, exit gracefully. Otherwise, proceed to processing the queue.",
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.DeletionQueue.Count",
                  "NumericGreaterThan": 0,
                  "Next": "Yes"
                },
                {
                  "Variable": "$.DeletionQueue.Count",
                  "NumericEquals": 0,
                  "Next": "No"
                }
              ],
              "Default": "No"
            },
            "No": {
              "Comment": "No work to be done.",
              "Type": "Succeed"
            },
            "Yes": {
              "Comment": "Continue.",
              "Type": "Pass",
              "Next": "Generate Queries"
            },
            "Generate Queries": {
              "Comment": "Generates a list of queries which need to be executed by Lambda",
              "Type": "Task",
              "Resource": "${TaskStub.Arn}",
              "ResultPath": "$.Queries",
              "Next": "Execute Queries"
            },
            "Execute Queries": {
              "Comment": "Executes the generated list of queries in parallel, returning a list of paths to be amended",
              "Type": "Map",
              "Next": "Flatten Query Results",
              "ItemsPath": "$.Queries",
              "ResultPath": "$.QueryResults",
              "MaxConcurrency": 10,
              "Iterator": {
                "StartAt": "Execute Query",
                "States": {
                  "Execute Query": {
                    "Type": "Task",
                    "Resource": "${AthenaRunnerActivity}",
                    "End": true
                  }
                }
              }
            },
            "Flatten Query Results": {
              "Comment": "Flattens the query result lists into a flat list",
              "Type": "Pass",
              "InputPath": "$.QueryResults[*][*]",
              "ResultPath": "$.QueryResults",
              "Next": "Aggregate and Depduplicate Results"
            },
            "Aggregate and Depduplicate Results": {
              "Comment": "Aggregates the results and deduplicates",
              "Type": "Task",
              "InputPath": "$.QueryResults",
              "ResultPath": "$.QueryResults",
              "Resource": "${TaskStub.Arn}",
              "Next": "Populate Queue"
            },
            "Populate Queue": {
              "Comment": "Creates queue items for every file",
              "Type": "Map",
              "Next": "Delete Query Results",
              "ItemsPath": "$.QueryResults",
              "ResultPath": "$.DeletionResults",
              "Iterator": {
                "StartAt": "Send Message",
                "States": {
                  "Send Message": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                    "HeartbeatSeconds": 3600,
                    "Parameters": {
                      "QueueUrl": "${QueueUrl}",
                      "MessageGroupId.$": "$$.Execution.Id",
                      "MessageBody": {
                        "Input.$": "$",
                        "TaskToken.$": "$$.Task.Token"
                      }
                    },
                    "End": true
                  }
                }
              }
            },
            "Delete Query Results": {
              "Comment": "Deletes query results from the query result bucket",
              "Type": "Task",
              "Parameters": {
                "ExecutionId.$": "$$.Execution.Id"
              },
              "ResultPath": "$.DeletedFiles",
              "Resource": "${DeleteQueryResults.Arn}",
              "InputPath": "$.QueryResults",
              "End": true
            },
            "CatchAllFallback": {
               "Type": "Pass",
               "Result": "This is a fallback from any error code",
               "End": true
            }
          }
        }
      RoleArn: !GetAtt StatesExecutionRole.Arn

  QueryResultBucket:
    Type: AWS::S3::Bucket

  TaskStub:
    Type: AWS::Serverless::Function
    Properties:
      Handler: task_stub.handler
      CodeUri: ../lambdas/src/tasks/

  OldestExecutionCheck:
    Type: AWS::Serverless::Function
    Properties:
      Handler: oldest_execution.handler
      CodeUri: ../lambdas/src/tasks/
      Environment:
        Variables:
          StateMachineArn: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StateMachinePrefix}-StateMachine
      Policies:
      - Statement:
        - Action:
          - "states:ListExecutions"
          Effect: "Allow"
          Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StateMachinePrefix}*

  QueryDeletionQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: query_deletion_queue.handler
      CodeUri: ../lambdas/src/tasks/
      Environment:
        Variables:
          DeletionQueueTableName: !Ref DeletionQueueTableName
      Policies:
      - DynamoDBReadPolicy:
          TableName: !Ref DeletionQueueTableName

  DeleteQueryResults:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete_query_results.handler
      CodeUri: ../lambdas/src/tasks/
      Environment:
        Variables:
          BucketName: !Ref QueryResultBucket
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref QueryResultBucket

  AthenaRunnerActivity:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: AthenaRunnerActivity

Outputs:
  DeleteTaskIAMRoleArn:
    Value: DeletionFlowStack.Outputs.DeleteTaskIAMRoleArn
  StateMachineArn:
    Value: !Ref StateMachineStub
  StateMachineRoleArn:
    Value: !GetAtt StatesExecutionRole.Arn
