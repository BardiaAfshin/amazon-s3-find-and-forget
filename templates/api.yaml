AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Jane Doe API

Globals:
  Function:
    Runtime: python3.7
    Timeout: 180
    AutoPublishAlias: live
    Tracing: Active
    Layers:
      - !Ref AWSSDKLayer
      - !Ref BotoFactory
      - !Ref Decorators
    Environment:
      Variables:
        DeletionQueueTable: !Ref DeletionQueueTableName
        LogLevel: !Ref LogLevel
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    Cors: "'*'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt CognitoUserPool.Arn

Parameters:
  DeletionQueueTableName:
    Description: Table name for Deletion Queue Table
    Type: String
  StateMachineArn:
    Description: State Machine to invoke to process the deletion queue
    Type: String
  CognitoUserPoolName:
    Type: String
    Default: JaneDoePool
  CognitoUserPoolClientName:
    Type: String
    Default: JaneDoePoolClient
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - CRITICAL
      - FATAL
      - ERROR
      - WARNING
      - INFO
      - DEBUG
      - NOTSET

Resources:
  # Cognito
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
  
  # Functions
  ## Queue
  EnqueueDeletion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.enqueue_handler
      CodeUri: ../lambdas/src/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue
            Method: PATCH
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref DeletionQueueTableName
  GetDeletionQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_handler
      CodeUri: ../lambdas/src/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
  CancelDeletion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.cancel_handler
      CodeUri: ../lambdas/src/queue/
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue/matches/{match_id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
  ProcessQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.process_handler
      CodeUri: ../lambdas/src/queue/
      Environment:
        Variables:
          StateMachineArn: !Ref StateMachineArn
      Events:
        Get:
          Type: Api
          Properties:
            Path: /queue
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeletionQueueTableName
        - Statement:
          - Action:
            - "states:ListStateMachines"
            - "states:DescribeStateMachine"
            - "states:StartExecution"
            Effect: "Allow"
            Resource: !Ref StateMachineArn
  # Jobs
  GetJob:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.get_job_handler
      CodeUri: ../lambdas/src/jobs/
      Environment:
        Variables:
          StateMachineArn: !Ref StateMachineArn
      Events:
        Get:
          Type: Api
          Properties:
            Path: /jobs/{job_id}
            Method: get
      Policies:
        - Statement:
          - Action:
            - "states:ListStateMachines"
            - "states:ListExecutions"
            - "states:DescribeExecution"
            Effect: "Allow"
            Resource: "*"

  # Layers
  AWSSDKLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AWSSDK
      Description: Latest confirmed compatible AWS SDK
      ContentUri: ../lambdas/layers/aws_sdk/
      CompatibleRuntimes:
        - python3.7
  BotoFactory:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: BotoManager
      Description: Boto3 Client and Resource factory
      ContentUri: ../lambdas/layers/boto_factory/
      CompatibleRuntimes:
        - python3.7
  Decorators:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: Decorators
      Description: Helpful function decorators
      ContentUri: ../lambdas/layers/decorators/
      CompatibleRuntimes:
        - python3.7

Outputs:
  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient
