import json
import logging
from os import getenv, path, environ

from cfn_flip import load
from dotenv import load_dotenv

logger = logging.getLogger()


def load_env():
    running_local_resources = getenv("RunningLocal", False)

    # If we're running in AWS mode, load values from the .env files generated by make env
    if not running_local_resources:
        load_dotenv(".env")
    else:
        # Running locally with SAM local
        load_dotenv(".env.local")
        with open(path.join(path.dirname(__file__), "env_vars.json")) as env_file:
            sam_env = json.load(env_file)
            # Function names in SAM local are the same as the logical identifiers
            for k in sam_env.keys():
                environ[k] = k
            # We also need to load in the table names
            function_env_vars = sam_env[next(iter(sam_env), {})]
            for var, val in function_env_vars.items():
                environ[var] = val


def load_template(template_name):
    project_root = path.dirname(path.dirname(path.dirname(__file__)))
    with open(path.join(project_root, "templates", template_name)) as f:
        return load(f.read())[0]


def get_resources_from_template(template, resource_type=None):
    resources = template["Resources"]
    if not resource_type:
        return resources

    return {k: v for k, v in resources.items() if v["Type"] == resource_type}


def get_schema_from_template(ddb_template, logical_identifier):
    resource = ddb_template["Resources"].get(logical_identifier)
    if not resource:
        raise KeyError("Unable to find resource with identifier %s", logical_identifier)

    return {
        k["KeyType"]: k["AttributeName"] for k in resource["Properties"]["KeySchema"]
    }


class DDBLocalManager(object):
    def __init__(self, ddb_resource):
        self.ddb = ddb_resource
        self.tables = []

    def create_table(self, table_name, hash_key, hash_key_type='S', range_key=None, range_key_type='S', attributes=[]):
        """
        Creates a DDB table for testing
        """
        key_schema = [{
            'AttributeName': hash_key,
            'KeyType': 'HASH'
        }, ]
        attr_definitions = [
            {
                'AttributeName': hash_key,
                'AttributeType': hash_key_type
            },
        ]
        if range_key:
            key_schema.append({
                'AttributeName': range_key,
                'KeyType': 'RANGE'
            })
            attr_definitions.append({
                'AttributeName': range_key,
                'AttributeType': range_key_type
            })
        attr_definitions = attr_definitions + attributes
        self.tables.append(table_name)
        t = self.ddb.create_table(
            AttributeDefinitions=attr_definitions,
            TableName=table_name,
            KeySchema=key_schema,
            BillingMode='PAY_PER_REQUEST',
        )
        logger.info("Table %s: %s", table_name, t.table_status)

    def delete_table(self, table_name):
        """
        Deletes a DDB tables
        """
        table = self.ddb.Table(table_name)
        table.delete()

    def delete_tables(self):
        """
        Deletes DDB tables created for testing
        """
        for table_name in self.tables:
            self.delete_table(table_name)
